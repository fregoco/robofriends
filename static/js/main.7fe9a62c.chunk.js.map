{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robotsArray","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filtedRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7fe9a62c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card = ({id, name, email}) => {\r\n\t//const {id, name, email} = props\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"roboto\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card.js'\r\n//import {robots} from './robots.js'\r\n\r\nconst CardList = ({robots}) => { \r\n\tconst robotsArray = robots.map((user, i) =>  <Card key = {i} id={user.id} name={user.name} email={user.email} />);\r\n\r\n\t//throw new Error(\"Something went wrong!!!!!!!!!!\")\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robotsArray}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => <div>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype='search' \r\n\t\t\t\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\t\t\t\tplaceholder='search robots'\r\n\t\t\t\t\t\t\t\tonChange={searchChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\nexport default SearchBox\t\t\t\t\t\t","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}} >\r\n  \t\t\t{props.children}\r\n    \t</div>\r\n    )\r\n\t\t\t\t\t\t}\r\n\r\nexport default Scroll\t\t\t\t\t\t  ","import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn (<h1>Ooooops!Something went wrong.</h1>)\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundary\r\n\r\n","import React from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox.js'\r\nimport {robots} from '../robots'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll.js'\r\nimport ErrorBoundary from '../components/ErrorBoundary.js'\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\r\n\t\tthis.state={\r\n\t\t\trobots: robots,\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=>response.json())\r\n\t\t\t.then(users => this.setState({robots: users}))\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t}\r\n\r\n\trender(){\r\n\t\tlet {robots, searchfield} = this.state\r\n\t\tconst filtedRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n\r\n\t\treturn !robots.length ? \r\n\t\t<h1>Loding...</h1>: \r\n\t\t(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>Robot Friends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t  \t\t\t<CardList robots={filtedRobots} />\r\n\t\t  \t\t</ErrorBoundary>\r\n\t\t  \t</Scroll>\r\n\t\t</div>\r\n\t\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n//import CardList from './CardList'\nimport App from './containers/App.js'\n\nReactDOM.render(\n\t<App />,\n\t//< CardList />,\n\t// <div>\n //    \t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n //    \t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n //    \t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n //    </div>,\n  // <h1>Hello, world!</h1>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}